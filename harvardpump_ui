#!/usr/bin/python
# vim: set fileencoding=UTF-8 :

from gi.repository import Gtk, GLib, GObject
from harvardpump import pump
import pkgutil

class PumpWindow(object):
        def __init__(self, port=0):
                self.pump = pump.Model44(port)

                self.builder = Gtk.Builder()
                src = pkgutil.get_data('harvardpump', 'pump.glade')
                self.builder.add_from_string(src)
                self.builder.connect_signals(self)

                self.win = self.builder.get_object("main_window")
                self.win.connect('destroy', Gtk.main_quit)
                self.range_store = self.builder.get_object('range_store')
                self.win.show_all()

                self.get_initial_config()
                self.poll_version()
                self.poll_status()

                GLib.timeout_add_seconds(1, self.poll_status)

        def get_initial_config(self):
                diam = self.pump.get_diameter()
                self.builder.get_object('diameter').set_value(diam)

                rate,unit = self.pump.get_flow_rate()
                self.builder.get_object('flow_rate').set_value(rate)

                target = self.pump.get_target_volume()
                self.builder.get_object('volume_target').set_value(target)

                if self.pump.get_mode() == 'volume':
                        self.builder.get_object('target_enabled_action').set_active(True)

        def poll_version(self):
                status = None
                img = 'gtk-no'
                try:
                        status = "Connected to pump version %s" % self.pump.get_version()
                        img = 'gtk-yes'
                except:
                        status = "Not connected"
                self.builder.get_object('conn_status').set_text(status)
                self.builder.get_object('conn_status_img').set_from_stock(img, Gtk.IconSize.BUTTON)

        def poll_status(self):
                messages = {
                        'running': ('gtk-go-forward', 'Running'),
                        'reverse': ('gtk-go-back', 'Running Reverse'),
                        'stalled': ('gtk-dialog-warning', 'Stalled'),
                        'paused':  ('gtk-media-pause', 'Paused'),
                        'stopped': ('gtk-media-stop', 'Stopped'),
                }
                ranges = {
                        'uL/min': (u'μL', 'min'),
                        'mL/min': (u'mL', 'min'),
                        'uL/hr' : (u'μL', 'hr'),
                        'mL/hr' : (u'mL', 'hr')
                }

                stock, msg = messages[self.pump.get_status()]
                self.builder.get_object('status_image').set_from_stock(stock, Gtk.IconSize.BUTTON)
                self.builder.get_object('status_label').set_text(msg)

                rate,unit = self.pump.get_flow_rate()
                vol_unit, t_unit = ranges[unit]
                self.builder.get_object('flow_rate_status').set_text(str(rate))
                self.builder.get_object('flow_rate_status_unit').set_text(unit.replace('u', u'μ'))


                vol = self.pump.get_volume_accum()
                self.builder.get_object('volume').set_text(str(vol))
                self.builder.get_object('volume_unit').set_text(vol_unit)

                return True

        def direction_changed_cb(self, action):
                dir = action.get_current_value()
                print action.props.current_value
                self.pump.set_direction(dir)
                        
        def edit_diameter_action_activate_cb(self, action):
                diam = self.builder.get_object('diameter').get_value()
                self.pump.set_diameter(diam)

        def run_action_toggled_cb(self, action):
                if action.get_active():
                        dir = self.builder.get_object('dir_forward_action').get_current_value()
                        self.pump.start()
                        if dir < 0:
                                self.pump.reverse()

                else:
                        self.pump.stop()

                self.poll_status()

        def clear_volume_action_activate_cb(self, action):
                self.pump.clear_volume_accum()
                self.poll_status()

        def target_enabled_action_toggled_cb(self, action):
                if action.get_active():
                        self.set_target_volume()
                else:
                        self.pump.set_pump_mode()

        def set_target_volume(self):
                target = self.builder.get_object('volume_target').get_value()
                self.pump.set_target_volume(target)
                self.pump.set_volume_mode()

        def range_changed_cb(self, combo):
                self.set_flow_rate()
                iter = self.builder.get_object('range').get_active_iter()
                flow_unit = self.range_store.get_value(iter, 0)
                #vol_unit = self.range_store.get_value(iter, 1)
                vol_unit = 'mL'   # In case of Model 44
                self.builder.get_object('target_volume_unit').set_text(vol_unit)

        def flow_rate_value_changed_cb(self, spin_but):
                self.set_flow_rate()

        def set_flow_rate(self):
                iter = self.builder.get_object('range').get_active_iter()
                range = self.range_store.get_value(iter, 2)
                value = self.builder.get_object('flow_rate').get_value()
                self.pump.set_flow_rate(value, range)
                
win = PumpWindow('/dev/ttyUSB0')
Gtk.main()
